#!/usr/bin/env python3
from lofasm.bbx import bbx
from lofasm.filter import DynamicRangeScaleTime
import numpy as np
import sys, os


if __name__ == "__main__":
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('-m', '--mu', type=float, default=1000.,
            help='value to be used for `mu`. Default is 1000.')
    p.add_argument('-v', '--verbose', action='count',
            help='verbosity level')
    p.add_argument('-o', '--output', type=str,
            help="path to output file. '-' to output to stdout", nargs='?',
            default='a.out', const='a.out')
    p.add_argument('infile', type=str, nargs='?',
            default='stdin',
            help = 'Input file to be processed. If no argument is provided then read from stdin.')
    args = p.parse_args()

    if args.infile == 'stdin':
        raise NotImplementedError("Reading from stdin has not yet been implemented.")

    def logmsg(x):
        if args.verbose:
            sys.stderr.write(str(x)+'\n')
            sys.stderr.flush()

    if args.output == '-':
        outfile = sys.stdout.buffer # unbuffered file-like object
    else:
        outfile = args.output

    # create bbx file objects
    logmsg("Using mu={}".format(args.mu))
    logmsg("Opening Input")
    lfx_in = bbx.LofasmFile(args.infile, verbose=bool(args.verbose))
    logmsg("Opening Output")
    lfx_out = bbx.LofasmFile(outfile, header=lfx_in.header, verbose=bool(args.verbose), mode='write')
    Nrows = int(lfx_in.header['metadata']['dim1_len'])
    for i in range(Nrows):
        logmsg("Processing {}:{}/{}".format(lfx_in.fname, i+1, Nrows))
        lfx_in.read_data(1)
        rowdat = lfx_in.get_data()
        rowdat = DynamicRangeScaleTime(rowdat, mu=args.mu) 
        lfx_out.add_data(rowdat)
        lfx_out.write()
    logmsg("Finished applying filter.")
    lfx_in.close()
    lfx_out.close()
    logmsg("Files closed.")
